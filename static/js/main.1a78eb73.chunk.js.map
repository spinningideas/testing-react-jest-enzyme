{"version":3,"sources":["User.js","App.js","serviceWorker.js","index.js"],"names":["style","width","margin","borderBottom","User","user","key","username","name","email","App","useState","isLoading","users","error","appState","setAppState","useEffect","fetch","then","response","json","data","catch","className","src","alt","message","map","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sMAEMA,EAAQ,CACZC,MAAO,MACPC,OAAQ,OACRC,aAAc,kBAYDC,EATF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,IAAKD,EAAKE,SAAUP,MAAOA,GAC9B,4BAAKK,EAAKG,MACV,2BAAIH,EAAKI,SC+BAC,MAxCf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,WAAW,EACXC,MAAO,GACPC,MAAO,OAJI,mBACNC,EADM,KACIC,EADJ,KAoBb,OAbAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJN,EAAY,CACVH,MAAOS,EACPV,WAAW,EACXE,MAAO,UAGVS,OAAM,SAACT,GAAD,OAAWE,EAAY,CAAEH,MAAO,GAAIC,QAAOF,WAAW,SAC9D,IAGD,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAI,aAAaD,UAAU,WAAWE,IAAI,UAEjD,yBAAKF,UAAU,eACb,6DACCT,EAASD,MAAQ,2BAAIC,EAASD,MAAMa,SAAe,KAClDZ,EAASH,UAKT,iDAJAG,EAASF,MAAMe,KAAI,SAACvB,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,SAAUF,KAAMA,UCrB7CwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTjB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BlB,OAAM,SAAAT,GACLkC,QAAQlC,MAAM,4CAA6CA,M,MCzFjEsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,4DAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,4DAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCnB,MAAMkB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAAC,GAEJ,IAAM0C,EAAc1C,EAASyC,QAAQE,IAAI,gBAEnB,MAApB3C,EAAS4C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM/C,MAAK,SAAAsB,GACjCA,EAAa0B,aAAahD,MAAK,WAC7BY,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLyB,QAAQC,IACN,oEAvFAoB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM/C,MAAK,WACjC6B,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.1a78eb73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst style = {\r\n  width: '70%',\r\n  margin: '1rem',\r\n  borderBottom: '1px solid #ccc'\r\n};\r\n\r\nconst User = ({ user }) => {\r\n  return (\r\n    <div key={user.username} style={style}>\r\n      <h4>{user.name}</h4>\r\n      <p>{user.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React, { useState, useEffect } from 'react';\nimport User from './User';\n\nfunction App() {\n  const [appState, setAppState] = useState({\n    isLoading: true,\n    users: [],\n    error: null\n  });\n\n  useEffect(() => {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then((response) => response.json())\n      .then((data) =>\n        setAppState({\n          users: data,\n          isLoading: false,\n          error: null\n        })\n      )\n      .catch((error) => setAppState({ users: [], error, isLoading: false }));\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img src=\"./logo.png\" className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className=\"app-content\">\n        <h1>Display Users Account Details</h1>\n        {appState.error ? <p>{appState.error.message}</p> : null}\n        {!appState.isLoading ? (\n          appState.users.map((user) => {\n            return <User key={user.username} user={user} />;\n          })\n        ) : (\n          <h3>Fetching Users...</h3>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}